#!/bin/bash

while [ $# -ne 0 ]; do
    param=$1
    shift
    case $param in
        -I) lib=$1 ; libs="$libs -I$lib"; shift ;;
        *) files="$files $param"
    esac
done

downcase()
{
    tr [[:upper:]] [[:lower:]]
}

find_os()
{
    uname -s | downcase
}

find_arch()
{ 
    case `uname -p` in
        i386) echo "386" ;;
        x86_64) echo "amd64" ;;
        *) echo $1
    esac
}

default_o()
{
    case $1 in
        amd64) echo 6 ;;
        arm) echo 7 ;;
        386) echo 8 ;;
    esac
}

[ x$GOROOT == 'x' ] && GOROOT=$HOME/go
[ x$GOOS == 'x' ] && GOOS=$(find_os)
[ x$GOARCH == 'x' ] && GOARCH=$(find_arch)
[ x$O == 'x' ] && O=$(default_o $GOARCH)
[ x$GC == 'x' ] && GC=${O}g
[ x$LD == 'x' ] && LD=${O}l

create_main() {
    cat > _specify_.go <<EOF
package main

import "specify";

var spec specify.Specification = specify.New();

func Be(value specify.Value) specify.Matcher {
	return specify.Be(value);
}

func Before(block func()) {
	spec.Before(block);
}

func Describe(name string, block func()) {
	spec.Describe(name, block);
}

func It(name string, block func(specify.The)) {
	spec.It(name, block);
}

func main() {
	runner := specify.DotRunner();
	spec.Run(runner);
}
EOF
}

run() {
    $GC -o _specify_.$O $libs _specify_.go $files \
        && $LD _specify_.$O \
        && ./$O.out
}

clean() {
    rm _specify_.* $O.out
}

create_main
GOROOT=$GOROOT GOOS=$GOOS GOARCH=$GOARCH run
clean
